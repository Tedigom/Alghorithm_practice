# -*- coding: utf-8 -*-
# python3 180219_Q01.py

# dynamic programming

''' 우선 피보나치 수열을 다음과 같은 짧은 수학공식으로 표현된다.
F(n) = 1 (n<=2일때)
F(n) = F(n-1)+F(n-2) (n>2 일 때)

이를 프로그램으로 옮기면 다음과 같은 모습이 된다.
'''

def Fibonacci(n):
    if n<=2:
        return 1
    else:
        return Fibonacci(n-1) + Fibonacci(n-2)


''' 이 피보나치 알고리즘은 성능명에서 최선인가?
n의 값이 커졌을때 이러한 중복의 정도는 단순히 한두번으로 그치는 것이 아니라 재귀적 호출이 진행될수록
폭발적으로 늘어난다.--> 그리하여 피보나치 알고리즘의 경우 재귀 알고리즘을 이용하는 것 보다 직접 for나
while 루프를 돌리는 것이 더 빠르고 효율적이다.
그리고 아래는 재귀 기법 대신 for 루프를 이용해서 피보나치 값을 구하는 알고리즘이다.
'''

def RevisedFibonacci(n):
    if n<= 2:
        return 1

    last1 = 1
    last2 = 1
    for i in range(2,n):
        result = last1 + last2
        last2 = last1
        last1 = result

    return result

''' 위 함수는 중복된 계산이 발생하지 않는다. 만약 n의 값이 충분히 커진다면, 성능면에서 큰 차이를 보이게 된다.
그렇지만 알고리즘의 '간결함' 이라는 측면에서 '재귀' 기법이 꼭 필요한 경우도 많다. 그런 경우에는
중복을 피할 방법이 있다면 재귀를 이용하는 것이 더 바람직하다.

--> 이럴때 사용되는 고난도의 초식이 바로 '동적 프로그래밍'이다. 동적 프로그래밍은 알고리즘의 효율성을
향상시키기 위해서 알고리즘의 수행 도중에 계산한 결과를 테이블 같은곳에 저장해 두었다가
'재활용'하는 기법이다. 예를들어 Fibonacci(4)의 값이 3이었다면, 이 값을 테이블 안에 기록해 두고,
다음 단계에서 Fibonacci(4)를 계산할 필요가 생기게 되면 Fibonacci(4)를 반복해서 호출하는 것이 아니라
테이블에 기록되어있는 3을 곧바로 읽어들이는 것이다.

동적 프로그래밍이 활용되는 예는 많다. 행렬의 곱셈을 수행하는 계산, 이진트리, 최단 경로 찾기등을 최적화하는
것은 물론, 그 밖에 여러 이론적 알고리즘의 성능을 개선하는데에 동적 프로그램이 널리 활용되고 있다.
'''

'''
def fibonacci(num):
    a, b = 0, 1
    for i in range(num):
        a, b = b, a+b
    return a
'''
